syntax = "proto3";

package com.sitewhere.communication.protobuf.proto;

option java_outer_classname = "SiteWhere";

// ###########################
// ### DEVICE REGISTRATION ###
// ###########################

// Optional string value.
message GOptionalString {
	string value = 1;
}

// Optional boolean value.
message GOptionalBoolean {
	bool value = 1;
}

// Optional double value.
message GOptionalDouble {
	double value = 1;
}

// Optional fixed64 value.
message GOptionalFixed64 {
	fixed64 value = 1;
}

message DeviceEvent {
	// Commands send from Device to SiteWhere
	enum Command {
		SendRegistration = 0;
		SendAcknowledgement = 1;
		SendLocation = 2;
		SendAlert = 3;
		SendMeasurement = 4;
		CreateStream = 5;
	}
	
	// Alert Level
	enum AlertLevel {
	    Info = 0;
	    Warning = 1;
		Error = 2;
		Critical = 3;
	}

	// Header contains the command, device token and originator.
	message Header {
		Command command = 1;
		GOptionalString deviceToken = 2;
		GOptionalString originator = 3;
	}

	// Fields for requesting a device registration.
	message DeviceRegistrationRequest {
		GOptionalString deviceTypeToken = 1;
		GOptionalString customerToken = 2;
		GOptionalString areaToken = 3;
		map<string, string> metadata = 4;
	}
	
	// Device Ack message fields
	message DeviceAcknowledge {
		GOptionalString message = 1;
	}

	// Device Location fields
	message DeviceLocation {
		GOptionalDouble latitude = 1;
		GOptionalDouble longitude = 2;
		GOptionalDouble elevation = 3;
		GOptionalFixed64 eventDate = 4;
		GOptionalBoolean updateState = 5;
		map<string, string> metadata = 6;
	}
	
	// Device Alert fields
	message DeviceAlert {
		GOptionalString alertType = 1;
		AlertLevel level = 2;
		GOptionalString alertMessage = 3;
		GOptionalFixed64 eventDate = 4;
		GOptionalBoolean updateState = 5;
		map<string, string> metadata = 6;
	}
	
	// A single measurement.
	message Measurement {
		GOptionalString measurementId = 1;
		GOptionalDouble measurementValue = 2;
	}

	// Device Measurement
	message DeviceMeasurements {
		repeated Measurement measurement = 1;
		GOptionalFixed64 eventDate = 2;
		GOptionalBoolean updateState = 3;
		map<string, string> metadata = 4;
	}
	
	// Create a device stream.
	message DeviceStream {
		GOptionalString streamId = 1;
		GOptionalString contentType = 2;
		map<string, string> metadata = 3;
	}
	
	// A chunk of streaming data.
	message DeviceStreamData {
		GOptionalString hardwareId = 1;
		GOptionalString streamId = 2;
		GOptionalFixed64 sequenceNumber = 3;
		bytes data = 4;
		GOptionalFixed64 eventDate = 5;
		map<string, string> metadata = 6;
	}
}

// Commands sent from SiteWhere to a device.
message Device {
	// Commands sent from SiteWhere to a device.
	enum Command {
		REGISTRATION_ACK = 0;
		DEVICE_STREAM_ACK = 1;
		RECEIVE_DEVICE_STREAM_DATA = 2;
	} 
	
	// Header contains the command and originator.
	message Header {
		Command command = 1;
		GOptionalString originator = 2;
		GOptionalString nestedPath = 3;
		GOptionalString nestedSpec = 4;
	}

	// Enumeration of registation state responses.
	enum RegistrationAckState {
		NEW_REGISTRATION = 0; 
		ALREADY_REGISTERED = 1; 
		REGISTRATION_ERROR = 2;
	}
	 
	enum RegistrationAckError {
		INVALID_SPECIFICATION = 0; 
		SITE_TOKEN_REQUIRED = 1; 
		NEW_DEVICES_NOT_ALLOWED = 2;
	} 

	// Acknowledges registration.
	message RegistrationAck {
		RegistrationAckState state = 1;
		RegistrationAckError errorType = 2;
		GOptionalString errorMessage = 3;
	}
	
	// Enumeration of device stream creation responses.
	enum DeviceStreamAckState {
		STREAM_CREATED = 0; 
		STREAM_EXISTS = 1; 
		STREAM_FAILED = 2;
	} 
	
	// Acknowledges creation of device stream.
	message DeviceStreamAck {
		GOptionalString streamId = 1;
		DeviceStreamAckState state = 2;
	}
}
